package main

import (
	"fmt"
	"github.com/aventhis/practice_avito/internal/api"
	"github.com/aventhis/practice_avito/internal/auth"
	"github.com/aventhis/practice_avito/internal/config"
	"github.com/aventhis/practice_avito/internal/storage"
	_ "github.com/google/uuid"
	"log"
	"net/http"
)

//–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
//–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
//–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ (auth, storage –∏ —Ç.–ø.)
//–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API
//–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞

func main() {
	//–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–µ—Ä–≤–æ–π? ‚Äî –°—Ç–∞—Ä—Ç—É–µ—Ç. –ó–Ω–∞—á–∏—Ç, –∫–æ–Ω—Ñ–∏–≥–∏.
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞: %v", err)

	}

	//–ö–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞? ‚Äî API –∑–∞–≤–∏—Å–∏—Ç –æ—Ç storage –∏ auth.
	// –ó–Ω–∞—á–∏—Ç, —Å–Ω–∞—á–∞–ª–∞ storage ‚Üí –ø–æ—Ç–æ–º auth ‚Üí –ø–æ—Ç–æ–º API.

	//–ö —á–µ–º—É –æ–Ω–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è? ‚Äî –ö –ë–î. –ó–Ω–∞—á–∏—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º storage.
	store, err := storage.NewStorage(cfg.Database.DSN)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}
	if err = store.InitDB(); err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// —Å–æ–∑–¥–∞–Ω–∏–µ auth-—Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å JWT üîê
	authService := auth.NewAuthService(cfg.Server.JWTSecret)

	//–ß—Ç–æ –µ–π –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã? ‚Äî API, –∑–Ω–∞—á–∏—Ç, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä.
	apiServer := api.NewAPI(store, authService)

	// –ó–¥–µ—Å—å –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	router := apiServer.SetupRoutes()

	log.Printf("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :%d", cfg.Server.Port)
	if err = http.ListenAndServe(fmt.Sprintf(":%d", cfg.Server.Port), router); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
